A JWT consists of two main parts: the header and the payload.
The payload contains claims, which are statements about an entity (typically, the user) and additional data.
These claims can include information such as user ID, roles, and expiration time.

Here's how the signing process works:

-  JWT Payload: A JWT consists of two main parts: the header and the payload. The payload contains claims,
    which are statements about an entity (typically, the user) and additional data. These claims can include
    information such as user ID, roles, and expiration time.

-  Header and Payload Encoding: The header and payload are first encoded into a JSON format and then
    Base64Url-encoded. The resulting strings are concatenated with a period ('.') to create the token's content.

-  Signing Key: To sign the JWT, a secret key or a private key is used. Only the entity that possesses the
    secret key (usually the server) can create a valid signature.

-  Signature Generation: The signature is generated by applying a cryptographic algorithm (specified in the
    JWT header)(in our case its HS256) to the encoded header and payload, along with the secret key (in our case
    its "@l9ha.$uum#ric"). This process produces a unique string of characters that is specific to the content
    of the JWT.

-  Adding the Signature: The generated signature is appended to the token's content, resulting in a JWT with
    three parts: the header, the payload, and the signature.

-  Transmission: The JWT is then transmitted to the client or another party, often as part of an authentication
    or authorization process.

-  Verification: When the recipient receives the JWT, they can verify its authenticity by:
        Separating the header, payload, and signature.
        Recalculating the signature using the received header and payload along with the known secret key.
        Comparing the recalculated signature to the received signature.

-  If the recalculated signature matches the received signature, it indicates that the JWT has not been tampered
    with and was indeed signed by the trusted entity. This process ensures the integrity and authenticity of the JWT.